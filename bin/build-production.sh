#!/bin/bash

# Production Build Script for Mezzio Minimal with Theme System
# Optimizes for production deployment with versioned assets

set -e

echo "ðŸš€ Starting production build for Mezzio Minimal..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 1. Backup original files
print_status "Backing up original files..."
cp composer.json composer.full.json 2>/dev/null || true

# 2. Clean previous builds
print_status "Cleaning previous builds..."
rm -rf public/themes/*/assets/
rm -rf public/themes/*/.vite/

# 3. Install PHP dependencies for production
print_status "Installing PHP dependencies for production..."
composer install --no-dev --optimize-autoloader --no-interaction

# 4. Build themes with versioned assets
print_status "Building Bootstrap theme..."
cd themes/bootstrap
if [ ! -d "node_modules" ]; then
    print_status "Installing Bootstrap theme dependencies..."
    pnpm install
fi
pnpm run build:prod
cd ../..

print_status "Building Main theme..."
cd themes/main
if [ ! -d "node_modules" ]; then
    print_status "Installing Main theme dependencies..."
    pnpm install
fi
pnpm run build:prod
cd ../..

# 5. Ultra-optimize vendor directory
print_status "Ultra-optimizing vendor directory..."
find vendor/ -type d -name "docs" -exec rm -rf {} + 2>/dev/null || true
find vendor/ -type d -name "test" -exec rm -rf {} + 2>/dev/null || true
find vendor/ -type d -name "tests" -exec rm -rf {} + 2>/dev/null || true
find vendor/ -type d -name "examples" -exec rm -rf {} + 2>/dev/null || true
find vendor/ -type d -name "demo" -exec rm -rf {} + 2>/dev/null || true
find vendor/ -type d -name "benchmark" -exec rm -rf {} + 2>/dev/null || true
find vendor/ -name "*.md" -delete 2>/dev/null || true
find vendor/ -name "*.txt" -delete 2>/dev/null || true
find vendor/ -name "LICENSE*" -delete 2>/dev/null || true
find vendor/ -name "README*" -delete 2>/dev/null || true
find vendor/ -name "CHANGELOG*" -delete 2>/dev/null || true
find vendor/ -name "CONTRIBUTING*" -delete 2>/dev/null || true
find vendor/ -name ".git*" -delete 2>/dev/null || true
find vendor/ -name "phpunit.xml*" -delete 2>/dev/null || true
find vendor/ -name "composer.json" -delete 2>/dev/null || true
find vendor/ -name "composer.lock" -delete 2>/dev/null || true
find vendor/ -name ".github" -type d -exec rm -rf {} + 2>/dev/null || true
find vendor/ -name ".travis*" -delete 2>/dev/null || true
find vendor/ -name ".scrutinizer*" -delete 2>/dev/null || true
find vendor/ -name "psalm.xml*" -delete 2>/dev/null || true
find vendor/ -name "infection.json*" -delete 2>/dev/null || true
find vendor/ -type d -empty -delete 2>/dev/null || true

# Remove specific heavy files that are not needed in production
find vendor/ -name "*.phar" -delete 2>/dev/null || true
find vendor/ -name "*.exe" -delete 2>/dev/null || true

# 6. Remove development files and git
print_status "Removing development files and git repository..."
rm -rf tests/ 2>/dev/null || true
rm -f phpstan.neon rector.php phpcs.xml 2>/dev/null || true
rm -rf .git/ 2>/dev/null || true
rm -f .gitignore .gitattributes 2>/dev/null || true
# Remove .htaccess from directories that block PHP built-in server
rm -f config/.htaccess src/.htaccess vendor/.htaccess themes/.htaccess 2>/dev/null || true

# 7. Clean theme directories and build files
print_status "Cleaning theme source files and build tools for production..."
rm -rf themes/*/node_modules 2>/dev/null || true
rm -f themes/*/pnpm-lock.yaml 2>/dev/null || true
rm -f themes/*/package-lock.json 2>/dev/null || true
rm -f build-*.sh 2>/dev/null || true
rm -f composer.full.json 2>/dev/null || true

# 8. Generate optimized autoloader
print_status "Generating optimized autoloader..."
composer dump-autoload --optimize --no-dev --classmap-authoritative

# 9. Set production permissions
print_status "Setting production permissions..."
# Set directory permissions
find . -type d -exec chmod 755 {} \; 2>/dev/null || true
# Set file permissions
find . -type f -exec chmod 644 {} \; 2>/dev/null || true
# Make public directory accessible
chmod 755 public/ 2>/dev/null || true
chmod 644 public/index.php 2>/dev/null || true
# Ensure .htaccess files are readable
find . -name ".htaccess" -exec chmod 644 {} \; 2>/dev/null || true
# Create and set data directory permissions
mkdir -p data 2>/dev/null || true
chmod 755 data/ 2>/dev/null || true

# 10. Optimize built assets
print_status "Optimizing built assets..."
# Remove source maps in production
find public/themes/ -name "*.map" -delete 2>/dev/null || true
# Remove .vite directory if not needed (keep manifest.json)
find public/themes/ -name ".vite" -type d | while read dir; do
    if [ -f "$dir/manifest.json" ]; then
        # Keep only manifest.json, remove other files
        find "$dir" -type f ! -name "manifest.json" -delete 2>/dev/null || true
    fi
done

# 11. Generate build info
print_status "Generating build information..."
BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S')
BUILD_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")

cat > BUILD_INFO.txt << EOF
Production Build Information
============================
Build Date: $BUILD_DATE
Git Hash: $BUILD_HASH
PHP Version: $(php -v | head -n 1)

Theme Assets:
$(find public/themes -name "*.css" -o -name "*.js" | sort)

Manifest Files:
$(find public/themes -name "manifest.json" | sort)

Size Information:
- Vendor size: $(du -sh vendor/ | cut -f1)
- Public themes: $(du -sh public/themes/ | cut -f1)
- Total size: $(du -sh . | cut -f1)

Features:
âœ… Versioned assets with hash for cache busting
âœ… Optimized vendor directory (removed docs, tests, examples)
âœ… Git repository removed (major size reduction)
âœ… Development files removed (build scripts, configs)
âœ… Production-ready permissions
âœ… Theme manifests for dynamic asset loading
âœ… Long-term cache strategy ready
âœ… Apache .htaccess security configuration

Security:
ðŸ”’ No git history exposed
ðŸ”’ No development tools in production
ðŸ”’ Directory access protection (.htaccess)
ðŸ”’ Security headers (XSS, CSRF, Clickjacking protection)
ðŸ”’ Minimal attack surface

Ready for production deployment!
EOF

# 12. Show results
echo ""
print_success "Production build completed successfully!"
echo ""
echo "ðŸ“Š Build Summary:"
echo "   - Build Date: $BUILD_DATE"
echo "   - Git Hash: $BUILD_HASH"
echo "   - Vendor size: $(du -sh vendor/ | cut -f1)"
echo "   - Public themes: $(du -sh public/themes/ | cut -f1)"
echo "   - Total size: $(du -sh . | cut -f1)"
echo "   - Theme assets: $(find public/themes -name "*.css" -o -name "*.js" | wc -l) files"
echo ""
print_success "âœ… Versioned assets with hash for long-term caching"
print_success "âœ… Git repository removed (major size reduction)"
print_success "âœ… Apache .htaccess security configuration"
print_success "âœ… Ultra-optimized for production deployment"
print_success "âœ… AssetHelper ready for dynamic asset loading"
echo ""
print_warning "ðŸ“„ See BUILD_INFO.txt for detailed information"
echo ""
print_success "ðŸš€ Ready for production deployment!"
